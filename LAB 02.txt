//Name: Tanmay Bhowmik; ID: 19101465; Sec: 02; Lab-Assignment 02;


//NodeClass
class Node{

            int element;
            Node next;
            public Node(int e, Node n)
             {
                element=e;
                next=n;
             }
            }



//TesterClass
public class taster {
	
	public static void main(String[]args) {
		
		
		int[]a= {1, 2, 3, 4, 5};
		MyList A =new MyList(a);
		A.print();
		
		A.showList();
		System.out.println();
		
		System.out.println(A.isEmpty());
		
		int[]b= {10, 20, 30, 40, 50};
		MyList B= new MyList(b);
		B.clear();
		System.out.println();
		
		int[]c= {1, 2, 3, 4, 5};
		MyList C=new MyList(c);
		Node newElement=new Node(6, null);
                System.out.println();
		C.insert(newElement);
		C.print();
		System.out.println();
		
		int[]d= {11, 12, 13, 14, 15};
		MyList D=new MyList(d);
		D.insert(6, 2);
		D.print();
		System.out.println();
		
		int[]e= {21, 22, 23, 24, 25};
		MyList E= new MyList(e);
		E.remove(23);
		E.print();
		System.out.println();
		
		
		int[]f= {1, 2, 5, 3, 8};
		MyList F=new MyList(f);
		F.EvenNumber();
		System.out.println();
		
		
		int[]g= {1, 2, 3, 4, 5};
		MyList G=new MyList(g);
	        G.reverseList();
		G.print();
		System.out.println();
		
		
		int[]h= {1, 2, 5, 3, 8};
		MyList H=new MyList(h);
		boolean result=H.searchElement(7);
		System.out.println(result);
		System.out.println();
		
		
		int[]i= {1, 2, 5, 3, 8};
		MyList I=new MyList(i);
		I.sumElement();
		System.out.println();
		
		
		int[]z= {3, 2, 5, 1, 8};
		MyList Z=new MyList(z);
	        Node result1=Z.rotateLeftRight(Z.head, 2, "left");
	        for(Node x=result1; x!=null; x=x.next)
		{
			System.out.print(x.element+" ");
		}
		
		System.out.println();
	}
 }





//Mylist_Class
public class MyList {
	 Node head;
	
	
	//Task02 (1)
	MyList(int[]a){
		
		Node j=new Node(a[0], null);
		head=j;
		Node h=j;
		
		for(int i=1; i<a.length; i++)
		{
			Node temp=new Node(a[i], null);
			h.next=temp;
			h=h.next;
		}
	}
	
	
	public void print() {
				
		for(Node x=head; x!=null; x=x.next)
		{
			System.out.print(x.element+" ");
		}
		
		System.out.println();
	}
	
	
	//Task02 (2)
	public void showList() {
		
		if(head==null) {
			System.out.println("Empty List");
		}
	}
	

	//Task02 (3)
	public boolean isEmpty() {
		if(head==null) {
			return true;
		}
		else {
			return false;
		}
	}
	
	
	//Task02 (4)
	public void clear() {
		head=null;
		System.out.print(head);
	}
	
	
	//Task02 (5)
	public void insert(Node newElement) {
		Node x=head;
		int i=0;
		for(; x.next!=null; x=x.next)
		{
			if(x.element==newElement.element) {
				System.out.print("Already Exist Element");
				i++;
				break;
			}
			
		}
		if(i==0) {
		x.next=newElement;
		}
	}
	

	//Task02 (6)
	public int listSize() {
		Node y=head;
		int count=0;
		for(; y!=null; y=y.next, count++) {
			
		}
		return count;
	}
	public void insert(int newElement, int index) {
		Node x=head;
		if(index<0) {
			System.out.println("Wrong Index");
		}
		else {
			 Node y = new Node(newElement, null);
			 if(index==0) {
				 y.next=x;
				 head=y;
			 }
			 else if(index==listSize()) {
				 for(x=head; x.next!=null; x=x.next) {
					 
				 }
				 x.next=y;
			 }
			 else {
				 Node previous=findNode(index-1);
				 y.next=previous.next;
				 previous.next=y;
				 
			 }
		}
	}
	public Node findNode(int index) {
		Node x=head;
		if(index<0) {
			return null;
		}
		else {
			int count =0;
			for(x=head; x!=null; x=x.next, count++) {
				if(count==index) {
					return x;
				}
			}
			return null;
		}		
	}
	
	
	
	//Task02 (7)
	public Node remove(int deleteKey) {
		for(Node x=head; x.next!=null; x=x.next)
		{
			Node k = new Node(deleteKey, null);
			if(x.next.element==k.element) {
				Node temp=x.next.next;
				
				Node temp2=x.next;
				x.next=temp;
				
				return temp2;
			}
			
			
		}
		return null;
	}
	
	
	//Task03 (1)
	public void EvenNumber() {
		
		Node evenHead=null;
		Node tail=null;
		
		for(Node x=head; x!=null; x=x.next)
		{
			if(x.element%2==0)
			{
				if(evenHead==null)
				{
					Node n= new Node(x.element, null);
					evenHead=n;
					tail =n;
					
				}
				else
				{
					Node temp= new Node(x.element, null);
					tail.next=temp;
					tail=tail.next;
				}
			}
		}
		for(Node y=evenHead; y!=null; y=y.next)
		{
			System.out.print(y.element+" ");
		}
		System.out.println();
	}
	
	
	//Task03 (2)
	public boolean searchElement(int element) {
		
		boolean result=false;
		for(Node n=head; n!=null; n=n.next) {
			if(n.element==element) {
				result=true;
			}
		}
		return result;
	}


	//Task03 (3)
	public void reverseList() {
		Node newHead=null;
		Node n= head;
		while(n!=null) {
			Node nextNode=n.next;
			n.next=newHead;
			newHead =n;
			n=nextNode;
		}
		head=newHead;
	}
	
	
	//Task03 (5)
	public void sumElement() {
		int sum=0;
		for(Node n=head; n!=null; n=n.next) {
			sum=sum+n.element;
		}
		System.out.println(sum);
	}
	 
	 
	
	//Task03 (6)
	public Node rotateLeftRight(Node head, int k, String leftRight) {
		
        if (head == null || head.next == null || k == 0)
        return head;
        
        int size=1, leftRotate=1, rightRotate;
        
        Node tail=head, newTail=head;
        while (tail.next != null) {
            size++;
            tail = tail.next;
        }
        k %= size;
        if (k == 0) return head;
        tail.next = head;
        if (leftRight.equals("right"))
        {
            rightRotate = size-k;
        }
        else
        {
            rightRotate = k;
        }
        
        for (int i=leftRotate; i<rightRotate; i++)
        {
            newTail = newTail.next;
        }
        
        head = newTail.next;
        newTail.next = null;
        return head;
    }
	 
}
